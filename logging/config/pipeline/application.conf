# 애플리케이션 파이프라인 - 특정 애플리케이션 로그 처리
input {
  tcp {
    port => 5001
    codec => json_lines
    tags => ["application", "tcp"]
  }

  http {
    port => 8081
    codec => json
    tags => ["application", "http"]
  }
}

filter {
  # Spring Boot 로그 처리
  if [logger] =~ /^org\.springframework/ or [logger] =~ /^com\.company/ {
    mutate {
      add_tag => ["spring-boot"]
      add_field => { "[@metadata][target_index]" => "app-spring-boot-%{+YYYY.MM.dd}" }
    }

    # Exception 스택 트레이스 처리
    if [stack_trace] {
      mutate {
        add_tag => ["exception"]
      }
    }
  }

  # Node.js 로그 처리
  else if [pid] and [hostname] {
    mutate {
      add_tag => ["nodejs"]
      add_field => { "[@metadata][target_index]" => "app-nodejs-%{+YYYY.MM.dd}" }
    }
  }

  # Kong API Gateway 로그 처리
  else if [service] and [route] {
    mutate {
      add_tag => ["kong", "api-gateway"]
      add_field => { "[@metadata][target_index]" => "app-kong-%{+YYYY.MM.dd}" }
    }

    # 응답 시간을 숫자로 변환
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
      }
    }

    # HTTP 상태 코드별 태그
    if [status] {
      if [status] >= 500 {
        mutate { add_tag => ["error", "5xx"] }
      } else if [status] >= 400 {
        mutate { add_tag => ["warning", "4xx"] }
      }
    }
  }

  # 데이터베이스 로그 처리
  else if [database] or [sql] {
    mutate {
      add_tag => ["database"]
      add_field => { "[@metadata][target_index]" => "app-database-%{+YYYY.MM.dd}" }
    }

    # 슬로우 쿼리 태그
    if [duration] {
      mutate {
        convert => { "duration" => "float" }
      }
      
      if [duration] > 1000 {
        mutate { add_tag => ["slow-query"] }
      }
    }
  }

  # 기본 애플리케이션 로그
  else {
    mutate {
      add_field => { "[@metadata][target_index]" => "app-general-%{+YYYY.MM.dd}" }
    }
  }

  # 로그 레벨별 우선순위 설정
  if [level] == "ERROR" {
    mutate { add_tag => ["high-priority"] }
  } else if [level] == "WARN" {
    mutate { add_tag => ["medium-priority"] }
  }

  # 사용자 정보 익명화 (개인정보 보호)
  if [user_id] {
    mutate {
      replace => { "user_id" => "user_%{user_id}" }
    }
  }

  if [email] {
    ruby {
      code => '
        email = event.get("email")
        if email
          parts = email.split("@")
          if parts.length == 2
            masked = parts[0][0] + "*" * (parts[0].length - 1) + "@" + parts[1]
            event.set("email", masked)
          end
        end
      '
    }
  }

  # 불필요한 필드 제거
  mutate {
    remove_field => [ "@version", "headers", "host" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][target_index]}"
    template_name => "application-logs"
    template_pattern => "app-*"
    template => {
      "index_patterns" => ["app-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "30s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "logger" => { "type" => "keyword" },
          "message" => { "type" => "text" },
          "response_time" => { "type" => "float" },
          "status" => { "type" => "integer" },
          "duration" => { "type" => "float" }
        }
      }
    }
  }

  # 에러 레벨 로그는 별도 인덱스에도 저장
  if [level] == "ERROR" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "app-errors-%{+YYYY.MM.dd}"
    }
  }
}