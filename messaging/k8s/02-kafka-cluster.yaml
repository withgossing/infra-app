apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
  ports:
    - name: kafka
      port: 9092
      targetPort: 9092
    - name: controller
      port: 29093
      targetPort: 29093

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
  ports:
    - name: kafka
      port: 9092
      targetPort: 9092
      nodePort: 30092

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
spec:
  serviceName: kafka-headless
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: broker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        app.kubernetes.io/component: broker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9308"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kafka
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
      containers:
        - name: kafka
          image: apache/kafka:2.13-3.8.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
              name: kafka
              protocol: TCP
            - containerPort: 29093
              name: controller
              protocol: TCP
            - containerPort: 9308
              name: jmx-metrics
              protocol: TCP
          env:
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1G -Xms1G"
            - name: KAFKA_JVM_PERFORMANCE_OPTS
              value: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
            - name: KAFKA_LOG4J_OPTS
              value: "-Dlog4j.configuration=file:/opt/kafka/config/log4j.properties"
            - name: JMX_PORT
              value: "9999"
            - name: KAFKA_JMX_OPTS
              value: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Djava.rmi.server.hostname=127.0.0.1"
          command:
            - "/bin/bash"
            - "-ec"
            - |
              # 설정 파일 복사
              cp /mnt/config/server.properties /opt/kafka/config/kraft/server.properties
              
              # 설정 스크립트 실행
              /mnt/scripts/setup.sh
              
              # Kafka 시작
              exec /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft/server.properties
          volumeMounts:
            - name: config
              mountPath: /mnt/config
              readOnly: true
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
            - name: data
              mountPath: /var/lib/kafka/data
          readinessProbe:
            exec:
              command:
                - "/bin/bash"
                - "/mnt/scripts/health-check.sh"
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "/mnt/scripts/health-check.sh"
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 2Gi
        # JMX Exporter sidecar for Prometheus metrics
        - name: jmx-exporter
          image: sscaling/jmx-prometheus-exporter:0.20.0
          ports:
            - containerPort: 9308
              name: jmx-metrics
              protocol: TCP
          command:
            - java
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_exporter.jar
            - "9308"
            - /etc/jmx-exporter/config.yaml
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-exporter
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: config
          configMap:
            name: kafka-config
            defaultMode: 0755
        - name: scripts
          configMap:
            name: kafka-scripts
            defaultMode: 0755
        - name: jmx-config
          configMap:
            name: kafka-jmx-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: kafka
          app.kubernetes.io/component: broker
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 20Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kafka
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
rules:
  - apiGroups: [""]
    resources:
      - pods
      - endpoints
      - services
    verbs:
      - get
      - list
      - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kafka
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kafka
subjects:
  - kind: ServiceAccount
    name: kafka
    namespace: messaging

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-jmx-config
  namespace: messaging
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: monitoring
data:
  config.yaml: |
    rules:
      # Kafka broker metrics
      - pattern: kafka.server<type=(.+), name=(.+)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
          service: "kafka"
      
      # Kafka network request metrics
      - pattern: kafka.network<type=(.+), name=(.+)><>Value
        name: kafka_network_$1_$2
        type: GAUGE
        labels:
          service: "kafka"
      
      # Kafka log metrics
      - pattern: kafka.log<type=(.+), name=(.+)><>Value
        name: kafka_log_$1_$2
        type: GAUGE
        labels:
          service: "kafka"
      
      # Kafka controller metrics
      - pattern: kafka.controller<type=(.+), name=(.+)><>Value
        name: kafka_controller_$1_$2
        type: GAUGE
        labels:
          service: "kafka"
      
      # JVM metrics
      - pattern: java.lang<type=(.+), name=(.+)><>(.+)
        name: jvm_$1_$2_$3
        type: GAUGE
        labels:
          service: "kafka"
