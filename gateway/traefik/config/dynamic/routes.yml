# *.meritz.com 도메인에 대한 동적 라우팅 설정

http:
  # 라우터 설정
  routers:
    # 메인 웹사이트 라우터
    web-meritz:
      rule: "Host(`www.meritz.com`) || Host(`meritz.com`)"
      service: web-service
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers
        - rate-limit

    # API 라우터
    api-meritz:
      rule: "Host(`api.meritz.com`)"
      service: api-service
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers
        - rate-limit
        - cors

    # 어드민 라우터
    admin-meritz:
      rule: "Host(`admin.meritz.com`)"
      service: admin-service
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers
        - rate-limit
        - admin-auth

    # 모니터링 대시보드 라우터
    monitoring-meritz:
      rule: "Host(`monitoring.meritz.com`)"
      service: monitoring-service
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers
        - rate-limit
        - basic-auth

    # 개발 환경 라우터
    dev-meritz:
      rule: "Host(`dev.meritz.com`)"
      service: dev-service
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers
        - rate-limit

    # 와일드카드 서브도메인 라우터 (기본값)
    wildcard-meritz:
      rule: "HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.meritz.com`)"
      service: default-service
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers
        - rate-limit
      priority: 1

  # 서비스 설정
  services:
    web-service:
      loadBalancer:
        servers:
          - url: "http://web-app:3000"
        healthCheck:
          path: /health
          interval: 30s
          timeout: 10s

    api-service:
      loadBalancer:
        servers:
          - url: "http://api-app:8080"
        healthCheck:
          path: /health
          interval: 30s
          timeout: 10s

    admin-service:
      loadBalancer:
        servers:
          - url: "http://admin-app:4000"
        healthCheck:
          path: /health
          interval: 30s
          timeout: 10s

    monitoring-service:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"
        healthCheck:
          path: /api/health
          interval: 30s
          timeout: 10s

    dev-service:
      loadBalancer:
        servers:
          - url: "http://dev-app:3000"
        healthCheck:
          path: /health
          interval: 30s
          timeout: 10s

    default-service:
      loadBalancer:
        servers:
          - url: "http://default-app:80"

  # 미들웨어 설정
  middlewares:
    # 보안 헤더
    security-headers:
      headers:
        accessControlAllowMethods:
          - GET
          - OPTIONS
          - PUT
          - POST
          - DELETE
        accessControlAllowOriginList:
          - "https://meritz.com"
          - "https://www.meritz.com"
        accessControlMaxAge: 100
        addVaryHeader: true
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customResponseHeaders:
          X-Frame-Options: "SAMEORIGIN"
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
          Strict-Transport-Security: "max-age=31536000; includeSubDomains"
          Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"

    # CORS 설정
    cors:
      headers:
        accessControlAllowCredentials: true
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
          - "X-Requested-With"
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        accessControlAllowOriginList:
          - "https://meritz.com"
          - "https://www.meritz.com"
          - "https://admin.meritz.com"

    # 레이트 리미팅
    rate-limit:
      rateLimit:
        average: 100
        burst: 50
        period: 1m

    # 기본 인증 (모니터링용)
    basic-auth:
      basicAuth:
        users:
          - "admin:$2y$10$2b2cu2Fw10/ZfDdQh2hkS.uY2WM4jhP6K6K9b6OOFqI7OOgHv7hhu" # admin:admin123

    # 어드민 인증 (더 강화된 보안)
    admin-auth:
      basicAuth:
        users:
          - "admin:$2y$10$2b2cu2Fw10/ZfDdQh2hkS.uY2WM4jhP6K6K9b6OOFqI7OOgHv7hhu" # admin:admin123
        headerField: "X-WebAuth-User"

    # 압축
    compression:
      compress: {}

    # 에러 페이지
    error-pages:
      errors:
        status:
          - "400-599"
        service: error-service
        query: "/{status}.html"

# TLS 설정
tls:
  options:
    default:
      sslProtocols:
        - "TLSv1.2"
        - "TLSv1.3"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
      curvePreferences:
        - CurveP521
        - CurveP384
      minVersion: "VersionTLS12"
